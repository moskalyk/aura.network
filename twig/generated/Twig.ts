/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.8.0-367
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface TwigDef {
    append_sig: (share_payload: { address: string; share: string; sig_version: string; }, callParams: CallParams$$<'share_payload'>) => { error: string; success: boolean; } | Promise<{ error: string; success: boolean; }>;
    get_random_hyper_node: (ttl: number, callParams: CallParams$$<'ttl'>) => string | Promise<string>;
    register_hyper_node: (peer_id: string, callParams: CallParams$$<'peer_id'>) => { error: string; success: boolean; } | Promise<{ error: string; success: boolean; }>;
}
export function registerTwig(service: TwigDef): void;
export function registerTwig(serviceId: string, service: TwigDef): void;
export function registerTwig(peer: FluencePeer, service: TwigDef): void;
export function registerTwig(peer: FluencePeer, serviceId: string, service: TwigDef): void;
       

export function registerTwig(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "twig",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "append_sig" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "share_payload" : {
                            "tag" : "struct",
                            "name" : "SigShare",
                            "fields" : {
                                "address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "share" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "sig_version" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "Status",
                            "fields" : {
                                "error" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            },
            "get_random_hyper_node" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "ttl" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "register_hyper_node" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "Status",
                            "fields" : {
                                "error" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      


export interface ValidatorDef {
    read: (address: string, callParams: CallParams$$<'address'>) => { sig_share: { address: string; share: string; sig_version: string; }; status: { error: string; success: boolean; }; } | Promise<{ sig_share: { address: string; share: string; sig_version: string; }; status: { error: string; success: boolean; }; }>;
}
export function registerValidator(service: ValidatorDef): void;
export function registerValidator(serviceId: string, service: ValidatorDef): void;
export function registerValidator(peer: FluencePeer, service: ValidatorDef): void;
export function registerValidator(peer: FluencePeer, serviceId: string, service: ValidatorDef): void;
       

export function registerValidator(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "leaf",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "read" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "SigStatus",
                            "fields" : {
                                "sig_share" : {
                                    "tag" : "struct",
                                    "name" : "SigShare",
                                    "fields" : {
                                        "address" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "share" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "sig_version" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                },
                                "status" : {
                                    "tag" : "struct",
                                    "name" : "Status",
                                    "fields" : {
                                        "error" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "success" : {
                                            "tag" : "scalar",
                                            "name" : "bool"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 
export type ReadSignatureResult = { sig_share: { address: string; share: string; sig_version: string; }; status: { error: string; success: boolean; }; }
export function readSignature(
    relay_peer_id: string,
    hyper_peer_id: string,
    address: string,
    config?: {ttl?: number}
): Promise<ReadSignatureResult>;

export function readSignature(
    peer: FluencePeer,
    relay_peer_id: string,
    hyper_peer_id: string,
    address: string,
    config?: {ttl?: number}
): Promise<ReadSignatureResult>;

export function readSignature(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "relay_peer_id") [] relay_peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "hyper_peer_id") [] hyper_peer_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "address") [] address)
                       )
                       (new $status
                        (new $result
                         (seq
                          (seq
                           (seq
                            (call -relay- ("op" "noop") [])
                            (xor
                             (call relay_peer_id ("peer" "timestamp_ms") [] ttl)
                             (seq
                              (seq
                               (call -relay- ("op" "noop") [])
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                              (call -relay- ("op" "noop") [])
                             )
                            )
                           )
                           (xor
                            (call hyper_peer_id ("twig" "get_random_hyper_node") [ttl] random_node)
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                             )
                             (call -relay- ("op" "noop") [])
                            )
                           )
                          )
                          (xor
                           (seq
                            (call random_node ("leaf" "read") [address] ret)
                            (call -relay- ("op" "noop") [])
                           )
                           (seq
                            (call -relay- ("op" "noop") [])
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                           )
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ret])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "readSignature",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "hyper_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "address" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "SigStatus",
                    "fields" : {
                        "sig_share" : {
                            "tag" : "struct",
                            "name" : "SigShare",
                            "fields" : {
                                "address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "share" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "sig_version" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "status" : {
                            "tag" : "struct",
                            "name" : "Status",
                            "fields" : {
                                "error" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type RegisterHyperNodeResult = { error: string; success: boolean; }
export function registerHyperNode(
    hub_peer_id: string,
    peer_id: string,
    config?: {ttl?: number}
): Promise<RegisterHyperNodeResult>;

export function registerHyperNode(
    peer: FluencePeer,
    hub_peer_id: string,
    peer_id: string,
    config?: {ttl?: number}
): Promise<RegisterHyperNodeResult>;

export function registerHyperNode(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "hub_peer_id") [] hub_peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call hub_peer_id ("twig" "register_hyper_node") [peer_id] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "registerHyperNode",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "hub_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Status",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CreateSignatureArgSig = { address: string; share: string; sig_version: string; } 
export type CreateSignatureResult = { error: string; success: boolean; }
export function createSignature(
    hub_peer_id: string,
    sig: CreateSignatureArgSig,
    config?: {ttl?: number}
): Promise<CreateSignatureResult>;

export function createSignature(
    peer: FluencePeer,
    hub_peer_id: string,
    sig: CreateSignatureArgSig,
    config?: {ttl?: number}
): Promise<CreateSignatureResult>;

export function createSignature(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "hub_peer_id") [] hub_peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "sig") [] sig)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call hub_peer_id ("twig" "append_sig") [sig] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "createSignature",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "hub_peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "sig" : {
                    "tag" : "struct",
                    "name" : "SigShare",
                    "fields" : {
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "share" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "sig_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Status",
                    "fields" : {
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
