import "@fluencelabs/aqua-lib/builtin.aqua"

data Status: 
    success: bool
    error: string

data SigShare:
    sig_version: string
    share: string
    address: string

data SigStatus:
    sig_share: SigShare
    status: Status

service Validator("leaf"):
    read(address: string) -> SigStatus

service Twig("twig"):
    append_sig(share_payload: SigShare) -> Status
    register_hyper_node(peer_id: PeerId) -> Status
    get_random_hyper_node(ttl: u64) -> PeerId
    
func createSignature(hub_peer_id: PeerId, sig: SigShare) -> Status:
    on hub_peer_id:
        res <- Twig.append_sig(sig)
    <- res

func registerHyperNode(hub_peer_id: PeerId, peer_id: PeerId) -> Status:
    on hub_peer_id:
        res <- Twig.register_hyper_node(peer_id)
    <- res

-- func readSignature(relay_peer_id: PeerId, hyper_peer_id: PeerId, address: string) -> bool, string:
func readSignature(relay_peer_id: PeerId, hyper_peer_id: PeerId, address: string) -> SigStatus:
    
    flume: *PeerId

    -- get a ttl for randomization
    on relay_peer_id:
        ttl <- Peer.timestamp_ms()
    
    -- get a random hyper node
    on hyper_peer_id:
        flume <<- Twig.get_random_hyper_node(ttl)

    -- set up streams
    result: *string
    status: *bool
    
    -- on random_node:
    --     ret <- Validator.read(address)
    -- <- ret

    -- read signature from random node using address
    on flume[0]:
        return <- Validator.read(address)
    <- return


    -- -- do a status check
    -- if ret.status.success:
    --     result <<- ret.sig_share.share
    --     status <<- true
    -- else:
    --     result <<- ret.status.error
    --     status <<- false

    -- <- status!, result!